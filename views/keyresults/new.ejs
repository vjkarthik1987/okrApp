<% layout('layouts/dashboard') %>
<% title = 'Add Key Result' %>

<h2>Add Key Result to: <%= objective.title %></h2>

<form action="/<%= orgName %>/objectives/<%= objective._id %>/keyresults" method="POST" id="krForm">
  <div class="mb-3">
    <label for="title">Key Result Title <span class="text-danger">*</span></label>
    <input type="text" name="title" id="title" class="form-control" required placeholder="e.g., Increase NPS score to 60+">
    <small class="text-muted">Be clear, specific, and outcome-focused.</small>
  </div>

  <div class="mb-3">
    <label for="metricType">Metric Type <span class="text-danger">*</span></label>
    <select name="metricType" id="metricType" onchange="handleMetricTypeChange(this.value)" class="form-control">
      <option value="percent">Percent</option>
      <option value="number">Number</option>
      <option value="boolean">Boolean</option>
      <option value="milestone">Milestone</option>
    </select>
    <small class="text-muted">Choose how progress is measured.</small>
  </div>

  <!-- Milestone Section -->
  <div id="milestonesSection" style="display: none;">
    <button type="button" onclick="generateMilestones()" class="btn btn-outline-primary">‚ú® Auto-Fill Milestones</button>

    <div id="milestoneLoader" class="mt-2" style="display: none;">
      <div class="spinner-border text-primary" role="status" style="width: 1.5rem; height: 1.5rem;"></div>
      <span class="ms-2">Generating milestones...</span>
    </div>

    <div id="milestoneList" class="mt-3"></div>

    <button type="button" class="btn btn-sm btn-outline-secondary mt-2" onclick="addMilestone()">‚ûï Add Milestone</button>
    <small class="text-muted d-block mt-1">Total weightage must be exactly 100%</small>
  </div>

  <div id="valueSection" class="row">
    <div class="col-md-6 mb-3">
      <label for="startValue">Start Value</label>
      <input type="text" name="startValue" id="startValue" class="form-control" placeholder="e.g., 40">
    </div>

    <div class="col-md-6 mb-3">
      <label for="targetValue">Target Value</label>
      <input type="text" name="targetValue" id="targetValue" class="form-control" placeholder="e.g., 60">
    </div>
  </div>

  <div class="mb-3">
    <label for="dueDate">Due Date (for completing this Key Result)</label>
    <input type="date" name="dueDate" id="dueDate" class="form-control">
    <small class="text-muted">This is the target date for overall KR completion.</small>
  </div>

  <div class="mb-3">
    <label for="assignedTeams">Assigned Teams</label>
    <select name="assignedTeams" id="assignedTeams" multiple class="form-control">
      <% teams.forEach(team => { %>
        <option value="<%= team._id %>"><%= team.name %></option>
      <% }) %>
    </select>
    <small class="text-muted">Teams responsible for execution of this KR</small>
  </div>

  <div class="mb-3">
    <label for="assignedTo">Assigned Users</label>
    <select name="assignedTo" id="assignedTo" multiple class="form-control">
      <% users.forEach(user => { %>
        <option value="<%= user._id %>"><%= user.name %> (<%= user.email %>)</option>
      <% }) %>
    </select>
    <small class="text-muted">Users individually responsible for this KR</small>
  </div>

  <div class="mb-3">
    <label for="direction">Progress Direction</label>
    <select name="direction" id="direction" class="form-control">
      <option value="auto" selected>Auto (based on start & target)</option>
      <option value="increase">Increase is good</option>
      <option value="decrease">Decrease is good</option>
    </select>
    <small class="text-muted">Auto will assume direction based on values.</small>
  </div>

  <input type="hidden" name="objectiveId" value="<%= objective._id %>">

  <button type="submit" class="btn btn-success mt-3">‚úÖ Save Key Result</button>
</form>

<a href="/<%= orgName %>/objectives/<%= objective._id %>/keyresults" class="btn btn-outline-secondary mt-2">‚¨Ö Back to Key Results</a>

<script>
  let milestoneCount = 0;

  function handleMetricTypeChange(value) {
    const section = document.getElementById('milestonesSection');
    const valueSection = document.getElementById('valueSection');

    if (value === 'milestone') {
      section.style.display = 'block';
      valueSection.style.display = 'none';
      if (milestoneCount === 0) {
        for (let i = 0; i < 5; i++) {
          addMilestone();
        }
      }
    } else {
      section.style.display = 'none';
      valueSection.style.display = 'flex';
    }
  }

  function addMilestone(label = '', weight = 20, date = '') {
    const container = document.getElementById('milestoneList');
    const row = document.createElement('div');
    row.className = 'row align-items-center mb-2';
    row.id = `milestone-row-${milestoneCount}`;

    row.innerHTML = `
      <div class="col-md-5">
        <input type="text" name="milestones[${milestoneCount}][label]" class="form-control" placeholder="Milestone ${milestoneCount + 1}" value="${label}">
      </div>
      <div class="col-md-2">
        <input type="number" name="milestones[${milestoneCount}][weight]" class="form-control weight-input" placeholder="%" value="${weight}" min="0" max="100" onchange="validateMilestoneWeights()">
      </div>
      <div class="col-md-3">
        <input type="date" name="milestones[${milestoneCount}][dueDate]" class="form-control" value="${date}">
      </div>
      <div class="col-md-2">
        <button type="button" class="btn btn-danger btn-sm" onclick="removeMilestone(${milestoneCount})">üóëÔ∏è</button>
      </div>
    `;

    container.appendChild(row);
    milestoneCount++;
    validateMilestoneWeights();
  }

  function removeMilestone(index) {
    const row = document.getElementById(`milestone-row-${index}`);
    if (row) {
      row.remove();
      validateMilestoneWeights();
    }
  }

  function validateMilestoneWeights() {
    const weightInputs = document.querySelectorAll('.weight-input');
    let total = 0;

    weightInputs.forEach(input => {
      total += parseFloat(input.value) || 0;
    });

    if (total !== 100) {
      document.getElementById('milestoneList').classList.add('border', 'border-danger');
    } else {
      document.getElementById('milestoneList').classList.remove('border', 'border-danger');
    }
  }

  async function generateMilestones() {
    const krTitle = document.getElementById('title').value;
    const loader = document.getElementById('milestoneLoader');
    const container = document.getElementById('milestoneList');

    loader.style.display = 'inline-flex';
    container.innerHTML = '';
    milestoneCount = 0;

    try {
      const response = await fetch(`${window.location.pathname}/generate-milestones`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ krTitle })
      });

      const data = await response.json();
      loader.style.display = 'none';

      if (data.milestones && Array.isArray(data.milestones)) {
        data.milestones.forEach(milestone => {
          addMilestone(milestone, 20, '');
        });
      } else {
        container.innerHTML = '<p class="text-danger">‚ö†Ô∏è Could not generate milestones. Try again.</p>';
      }
    } catch (error) {
      console.error(error);
      loader.style.display = 'none';
      container.innerHTML = '<p class="text-danger">‚ö†Ô∏è Error contacting AI service. Please try again.</p>';
    }
  }
</script>
