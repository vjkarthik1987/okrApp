<% layout('layouts/dashboard') %>
<% title = 'Edit Key Result' %>

<h2 class="mb-4 text-gradient">üéØ Edit Key Result</h2>

<form action="/<%= orgName %>/objectives/<%= objective._id %>/keyresults/<%= kr._id %>" method="POST" class="animated-form">

  <div class="mb-3">
    <label class="funky-label" for="title">Key Result Title *</label>
    <input type="text" name="title" id="title" class="form-control input-pop" value="<%= kr.title %>" required>
  </div>

  <div class="mb-3">
    <label class="funky-label" for="metricType">Metric Type *</label>
    <select name="metricType" id="metricType" class="form-control input-pop" onchange="handleMetricTypeChange(this.value)">
      <option value="percent" <%= kr.metricType === 'percent' ? 'selected' : '' %>>Percent</option>
      <option value="number" <%= kr.metricType === 'number' ? 'selected' : '' %>>Number</option>
      <option value="boolean" <%= kr.metricType === 'boolean' ? 'selected' : '' %>>Boolean</option>
      <option value="milestone" <%= kr.metricType === 'milestone' ? 'selected' : '' %>>Milestone</option>
    </select>
  </div>

  <!-- Milestones -->
  <div id="milestonesSection" style="<%= kr.metricType === 'milestone' ? '' : 'display: none;' %>">
    <div id="milestoneList">
      <% if (kr.milestones && kr.milestones.length > 0) { %>
        <% kr.milestones.forEach((m, i) => { %>
          <div class="row align-items-center mb-2" id="milestone-row-<%= i %>">
            <div class="col-md-5">
              <input type="text" name="milestones[<%= i %>][label]" class="form-control input-pop" value="<%= m.label %>">
            </div>
            <div class="col-md-2">
              <input type="number" name="milestones[<%= i %>][weight]" class="form-control weight-input input-pop" value="<%= m.weight %>" onchange="validateMilestoneWeights()">
            </div>
            <div class="col-md-3">
              <input type="date" name="milestones[<%= i %>][dueDate]" class="form-control input-pop" value="<%= m.dueDate?.toISOString().split('T')[0] || '' %>">
            </div>
            <div class="col-md-2">
              <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeMilestone(<%= i %>)">üóëÔ∏è</button>
            </div>
          </div>
        <% }) %>
      <% } %>
    </div>
    <button type="button" class="btn btn-outline-primary btn-sm" onclick="addMilestone()">‚ûï Add Milestone</button>
    <small class="text-muted d-block mt-1">Total milestone weight must be exactly 100%</small>
  </div>

  <!-- Start / Target -->
  <div class="row">
    <div class="col-md-6 mb-3">
      <label class="funky-label">Start Value</label>
      <input type="text" name="startValue" class="form-control input-pop" value="<%= kr.startValue ?? '' %>">
    </div>
    <div class="col-md-6 mb-3">
      <label class="funky-label">Target Value</label>
      <input type="text" name="targetValue" class="form-control input-pop" value="<%= kr.targetValue ?? '' %>">
    </div>
  </div>

  <!-- Due Dates -->
  <div class="row">
    <div class="col-md-6 mb-3">
      <label class="funky-label">Due Date</label>
      <input type="date" name="dueDate" class="form-control input-pop" value="<%= kr.dueDate?.toISOString().split('T')[0] || '' %>">
    </div>
    <div class="col-md-6 mb-3">
      <label class="funky-label">Actual Completion Date</label>
      <input type="date" name="actualCompletionDate" class="form-control input-pop" value="<%= kr.actualCompletionDate?.toISOString().split('T')[0] || '' %>">
    </div>
  </div>

  <!-- Assigned Teams -->
  <div class="mb-3">
    <label class="funky-label">Assigned Teams</label>
    <select name="assignedTeams" id="assignedTeams" multiple class="form-control" style="display:none;">
      <% const selectedTeamIds = kr.assignedTeams.map(t => String(t._id)); %>
      <% teams.forEach(team => { %>
        <option value="<%= team._id %>" <%= selectedTeamIds.includes(String(team._id)) ? 'selected' : '' %>><%= team.name %></option>
      <% }) %>
    </select>
  </div>

  <!-- Assigned Users -->
  <div class="mb-3">
    <label class="funky-label">Assigned Users</label>
    <select name="assignedTo" id="assignedTo" multiple class="form-control" style="display:none;">
      <% const selectedUserIds = kr.assignedTo.map(u => String(u._id)); %>
      <% users.forEach(user => { %>
        <option value="<%= user._id %>" <%= selectedUserIds.includes(String(user._id)) ? 'selected' : '' %>>
          <%= user.name %> (<%= user.email %>)
        </option>
      <% }) %>
    </select>
  </div>

  <!-- Progress Direction -->
  <div class="mb-3">
    <label class="funky-label">Progress Direction</label>
    <select name="direction" class="form-control input-pop">
      <option value="auto" <%= kr.direction === 'auto' ? 'selected' : '' %>>Auto</option>
      <option value="increase" <%= kr.direction === 'increase' ? 'selected' : '' %>>Increase is better</option>
      <option value="decrease" <%= kr.direction === 'decrease' ? 'selected' : '' %>>Decrease is better</option>
    </select>
  </div>

  <button type="submit" class="btn btn-success">üíæ Save Key Result</button>
  <a href="/<%= orgName %>/objectives/<%= objective._id %>/keyresults" class="btn btn-outline-secondary ms-2">‚¨Ö Back</a>
</form>

<!-- üß† JS for Milestones + Typeahead Multiselect -->
<script>
  let milestoneCount = <%= kr.milestones?.length || 0 %>;

  function handleMetricTypeChange(value) {
    document.getElementById('milestonesSection').style.display = value === 'milestone' ? 'block' : 'none';
  }

  function addMilestone(label = '', weight = 20, date = '') {
    const container = document.getElementById('milestoneList');
    const row = document.createElement('div');
    row.className = 'row align-items-center mb-2';
    row.id = `milestone-row-${milestoneCount}`;
    row.innerHTML = `
      <div class="col-md-5"><input type="text" name="milestones[${milestoneCount}][label]" class="form-control input-pop" value="${label}"></div>
      <div class="col-md-2"><input type="number" name="milestones[${milestoneCount}][weight]" class="form-control weight-input input-pop" value="${weight}" onchange="validateMilestoneWeights()"></div>
      <div class="col-md-3"><input type="date" name="milestones[${milestoneCount}][dueDate]" class="form-control input-pop" value="${date}"></div>
      <div class="col-md-2"><button type="button" class="btn btn-outline-danger btn-sm" onclick="removeMilestone(${milestoneCount})">üóëÔ∏è</button></div>
    `;
    container.appendChild(row);
    milestoneCount++;
    validateMilestoneWeights();
  }

  function removeMilestone(i) {
    document.getElementById(`milestone-row-${i}`)?.remove();
    validateMilestoneWeights();
  }

  function validateMilestoneWeights() {
    const weights = [...document.querySelectorAll('.weight-input')];
    const total = weights.reduce((sum, w) => sum + (parseFloat(w.value) || 0), 0);
    document.getElementById('milestoneList').classList.toggle('border-danger', total !== 100);
  }

  function enhanceMultiSelect(selectId) {
    const select = document.getElementById(selectId);
    const wrapper = document.createElement('div');
    wrapper.className = 'multi-select-wrapper mb-2';

    const input = document.createElement('input');
    input.className = 'form-control mb-1';
    input.placeholder = 'Type and press Enter...';

    const chipList = document.createElement('ul');
    chipList.className = 'selected-list';

    select.parentNode.insertBefore(wrapper, select);
    wrapper.appendChild(input);
    wrapper.appendChild(chipList);
    select.style.display = 'none';

    const selected = new Set([...select.selectedOptions].map(opt => opt.value));

    function renderChips() {
      chipList.innerHTML = '';
      [...select.options].forEach(opt => {
        if (selected.has(opt.value)) {
          const chip = document.createElement('li');
          chip.className = 'selected-chip';
          chip.textContent = opt.text;
          chip.onclick = () => {
            selected.delete(opt.value);
            opt.selected = false;
            renderChips();
          };
          chipList.appendChild(chip);
        }
      });
    }

    input.addEventListener('keydown', e => {
      if (e.key === 'Enter') {
        e.preventDefault();
        const term = input.value.toLowerCase().trim();
        const match = [...select.options].find(o => o.text.toLowerCase().includes(term) && !selected.has(o.value));
        if (match) {
          selected.add(match.value);
          match.selected = true;
          input.value = '';
          renderChips();
        }
      }
    });

    renderChips();
  }

  document.addEventListener('DOMContentLoaded', () => {
    enhanceMultiSelect('assignedTeams');
    enhanceMultiSelect('assignedTo');
  });
</script>
